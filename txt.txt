M·ª§C 2: N√∫t ‚Äúüóë Xo√° nh√≥m‚Äù
const handleDeleteGroup = async (groupId: string) => {
  try {
    const response = await fetch(`${API_ENDPOINTS.DELETE_GROUP}`, {
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        tableId,
        groupId: parseInt(groupId, 10),
      }),
    });

    const result = await response.json();
    console.log('‚úÖ ƒê√£ xo√° nh√≥m:', result);
    fetchData();
  } catch (error) {
    console.error('‚ùå L·ªói xo√° nh√≥m:', error);
  }
};

<TouchableOpacity
  onPress={() => handleDeleteGroup(group.groupId)}
  style={styles.deleteGroupButton}>
  <Text style={styles.callOrderText}>üóë Xo√° nh√≥m</Text>
</TouchableOpacity>


M·ª§C 3: S·ª≠a m√≥n, Xo√° m√≥n, TƒÉng gi·∫£m s·ªë l∆∞·ª£ng
const handleDeleteDish = async (groupId: string, dishId: string) => {
  try {
    const response = await fetch(`${API_ENDPOINTS.DELETE_ORDER}`, {
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        tableId,
        groupId: parseInt(groupId, 10),
        dishId,
      }),
    });
    const result = await response.json();
    console.log('‚úÖ M√≥n ƒë√£ xo√°:', result);
    fetchData();
  } catch (error) {
    console.error('‚ùå L·ªói xo√° m√≥n:', error);
  }
};

const handleUpdateQuantity = async (groupId: string, dishId: string, newQuantity: number) => {
  if (newQuantity <= 0) return;
  try {
    const response = await fetch(`${API_ENDPOINTS.UPDATE_ORDER_QUANTITY}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        tableId,
        groupId: parseInt(groupId, 10),
        dishId,
        quantity: newQuantity,
      }),
    });
    const result = await response.json();
    console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:', result);
    fetchData();
  } catch (error) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng:', error);
  }
};

<View style={styles.dishContainer}>
  <Text style={styles.dishName}>{dishMap[order.dishId] || 'M√≥n kh√¥ng x√°c ƒë·ªãnh'}</Text>
  <Text style={styles.toppingText}>Toppings: {order.toppings.map(t => t.name).join(', ')}</Text>

  <View style={styles.quantityRow}>
    <TouchableOpacity onPress={() => handleUpdateQuantity(group.groupId, order.dishId, order.quantity - 1)}>
      <Text style={styles.quantityButton}>‚ûñ</Text>
    </TouchableOpacity>

    <Text style={styles.quantityText}>{order.quantity}</Text>

    <TouchableOpacity onPress={() => handleUpdateQuantity(group.groupId, order.dishId, order.quantity + 1)}>
      <Text style={styles.quantityButton}>‚ûï</Text>
    </TouchableOpacity>

    <TouchableOpacity onPress={() => handleDeleteDish(group.groupId, order.dishId)}>
      <Text style={styles.removeButton}>‚ùå</Text>
    </TouchableOpacity>
  </View>
</View>


